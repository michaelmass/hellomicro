// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: service.proto

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Cookie_SameSite int32

const (
	Cookie_TYPE_UNSPECIFIED Cookie_SameSite = 0
	Cookie_DEFAULT_MODE     Cookie_SameSite = 1
	Cookie_LAX_MODE         Cookie_SameSite = 2
	Cookie_STRICT_MODE      Cookie_SameSite = 3
	Cookie_NONE_MODE        Cookie_SameSite = 4
)

var Cookie_SameSite_name = map[int32]string{
	0: "TYPE_UNSPECIFIED",
	1: "DEFAULT_MODE",
	2: "LAX_MODE",
	3: "STRICT_MODE",
	4: "NONE_MODE",
}

var Cookie_SameSite_value = map[string]int32{
	"TYPE_UNSPECIFIED": 0,
	"DEFAULT_MODE":     1,
	"LAX_MODE":         2,
	"STRICT_MODE":      3,
	"NONE_MODE":        4,
}

func (x Cookie_SameSite) String() string {
	return proto.EnumName(Cookie_SameSite_name, int32(x))
}

func (Cookie_SameSite) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{2, 0}
}

type StringArray struct {
	Values               []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" yaml:"-" xml:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" yaml:"-" xml:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" yaml:"-" xml:"-" bson:"-"`
}

func (m *StringArray) Reset()         { *m = StringArray{} }
func (m *StringArray) String() string { return proto.CompactTextString(m) }
func (*StringArray) ProtoMessage()    {}
func (*StringArray) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}
func (m *StringArray) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StringArray) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StringArray.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StringArray) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringArray.Merge(m, src)
}
func (m *StringArray) XXX_Size() int {
	return m.Size()
}
func (m *StringArray) XXX_DiscardUnknown() {
	xxx_messageInfo_StringArray.DiscardUnknown(m)
}

var xxx_messageInfo_StringArray proto.InternalMessageInfo

func (m *StringArray) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

func (*StringArray) XXX_MessageName() string {
	return "api.hellomicro.v1.StringArray"
}

type URL struct {
	Scheme               string   `protobuf:"bytes,1,opt,name=scheme,proto3" json:"scheme,omitempty"`
	Opaque               string   `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	Username             string   `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	Password             string   `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	Host                 string   `protobuf:"bytes,5,opt,name=host,proto3" json:"host,omitempty"`
	Path                 string   `protobuf:"bytes,6,opt,name=path,proto3" json:"path,omitempty"`
	RawPath              string   `protobuf:"bytes,7,opt,name=raw_path,json=rawPath,proto3" json:"raw_path,omitempty"`
	RawQuery             string   `protobuf:"bytes,8,opt,name=raw_query,json=rawQuery,proto3" json:"raw_query,omitempty"`
	Fragment             string   `protobuf:"bytes,9,opt,name=fragment,proto3" json:"fragment,omitempty"`
	RawFragment          string   `protobuf:"bytes,10,opt,name=raw_fragment,json=rawFragment,proto3" json:"raw_fragment,omitempty"`
	ForceQuery           bool     `protobuf:"varint,11,opt,name=force_query,json=forceQuery,proto3" json:"force_query,omitempty"`
	PasswordSet          bool     `protobuf:"varint,12,opt,name=password_set,json=passwordSet,proto3" json:"password_set,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" yaml:"-" xml:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" yaml:"-" xml:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" yaml:"-" xml:"-" bson:"-"`
}

func (m *URL) Reset()         { *m = URL{} }
func (m *URL) String() string { return proto.CompactTextString(m) }
func (*URL) ProtoMessage()    {}
func (*URL) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{1}
}
func (m *URL) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *URL) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_URL.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *URL) XXX_Merge(src proto.Message) {
	xxx_messageInfo_URL.Merge(m, src)
}
func (m *URL) XXX_Size() int {
	return m.Size()
}
func (m *URL) XXX_DiscardUnknown() {
	xxx_messageInfo_URL.DiscardUnknown(m)
}

var xxx_messageInfo_URL proto.InternalMessageInfo

func (m *URL) GetScheme() string {
	if m != nil {
		return m.Scheme
	}
	return ""
}

func (m *URL) GetOpaque() string {
	if m != nil {
		return m.Opaque
	}
	return ""
}

func (m *URL) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *URL) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *URL) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *URL) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *URL) GetRawPath() string {
	if m != nil {
		return m.RawPath
	}
	return ""
}

func (m *URL) GetRawQuery() string {
	if m != nil {
		return m.RawQuery
	}
	return ""
}

func (m *URL) GetFragment() string {
	if m != nil {
		return m.Fragment
	}
	return ""
}

func (m *URL) GetRawFragment() string {
	if m != nil {
		return m.RawFragment
	}
	return ""
}

func (m *URL) GetForceQuery() bool {
	if m != nil {
		return m.ForceQuery
	}
	return false
}

func (m *URL) GetPasswordSet() bool {
	if m != nil {
		return m.PasswordSet
	}
	return false
}

func (*URL) XXX_MessageName() string {
	return "api.hellomicro.v1.URL"
}

type Cookie struct {
	Name                 string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value                string           `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Path                 string           `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Domain               string           `protobuf:"bytes,4,opt,name=domain,proto3" json:"domain,omitempty"`
	Expires              *types.Timestamp `protobuf:"bytes,5,opt,name=expires,proto3" json:"expires,omitempty"`
	RawExpires           string           `protobuf:"bytes,6,opt,name=raw_expires,json=rawExpires,proto3" json:"raw_expires,omitempty"`
	MaxAge               int32            `protobuf:"varint,7,opt,name=max_age,json=maxAge,proto3" json:"max_age,omitempty"`
	Secure               bool             `protobuf:"varint,8,opt,name=secure,proto3" json:"secure,omitempty"`
	HttpOnly             bool             `protobuf:"varint,9,opt,name=http_only,json=httpOnly,proto3" json:"http_only,omitempty"`
	SameSite             Cookie_SameSite  `protobuf:"varint,10,opt,name=same_site,json=sameSite,proto3,enum=api.hellomicro.v1.Cookie_SameSite" json:"same_site,omitempty"`
	Raw                  string           `protobuf:"bytes,11,opt,name=raw,proto3" json:"raw,omitempty"`
	Unparsed             []string         `protobuf:"bytes,12,rep,name=unparsed,proto3" json:"unparsed,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-" yaml:"-" xml:"-" bson:"-"`
	XXX_unrecognized     []byte           `json:"-" yaml:"-" xml:"-" bson:"-"`
	XXX_sizecache        int32            `json:"-" yaml:"-" xml:"-" bson:"-"`
}

func (m *Cookie) Reset()         { *m = Cookie{} }
func (m *Cookie) String() string { return proto.CompactTextString(m) }
func (*Cookie) ProtoMessage()    {}
func (*Cookie) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{2}
}
func (m *Cookie) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Cookie) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Cookie.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Cookie) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cookie.Merge(m, src)
}
func (m *Cookie) XXX_Size() int {
	return m.Size()
}
func (m *Cookie) XXX_DiscardUnknown() {
	xxx_messageInfo_Cookie.DiscardUnknown(m)
}

var xxx_messageInfo_Cookie proto.InternalMessageInfo

func (m *Cookie) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Cookie) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Cookie) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Cookie) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *Cookie) GetExpires() *types.Timestamp {
	if m != nil {
		return m.Expires
	}
	return nil
}

func (m *Cookie) GetRawExpires() string {
	if m != nil {
		return m.RawExpires
	}
	return ""
}

func (m *Cookie) GetMaxAge() int32 {
	if m != nil {
		return m.MaxAge
	}
	return 0
}

func (m *Cookie) GetSecure() bool {
	if m != nil {
		return m.Secure
	}
	return false
}

func (m *Cookie) GetHttpOnly() bool {
	if m != nil {
		return m.HttpOnly
	}
	return false
}

func (m *Cookie) GetSameSite() Cookie_SameSite {
	if m != nil {
		return m.SameSite
	}
	return Cookie_TYPE_UNSPECIFIED
}

func (m *Cookie) GetRaw() string {
	if m != nil {
		return m.Raw
	}
	return ""
}

func (m *Cookie) GetUnparsed() []string {
	if m != nil {
		return m.Unparsed
	}
	return nil
}

func (*Cookie) XXX_MessageName() string {
	return "api.hellomicro.v1.Cookie"
}

type FileInfo struct {
	Path                 string           `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Size_                int64            `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Mode                 string           `protobuf:"bytes,3,opt,name=mode,proto3" json:"mode,omitempty"`
	ModTime              *types.Timestamp `protobuf:"bytes,4,opt,name=modTime,proto3" json:"modTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-" yaml:"-" xml:"-" bson:"-"`
	XXX_unrecognized     []byte           `json:"-" yaml:"-" xml:"-" bson:"-"`
	XXX_sizecache        int32            `json:"-" yaml:"-" xml:"-" bson:"-"`
}

func (m *FileInfo) Reset()         { *m = FileInfo{} }
func (m *FileInfo) String() string { return proto.CompactTextString(m) }
func (*FileInfo) ProtoMessage()    {}
func (*FileInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{3}
}
func (m *FileInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileInfo.Merge(m, src)
}
func (m *FileInfo) XXX_Size() int {
	return m.Size()
}
func (m *FileInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FileInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FileInfo proto.InternalMessageInfo

func (m *FileInfo) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *FileInfo) GetSize_() int64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *FileInfo) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *FileInfo) GetModTime() *types.Timestamp {
	if m != nil {
		return m.ModTime
	}
	return nil
}

func (*FileInfo) XXX_MessageName() string {
	return "api.hellomicro.v1.FileInfo"
}

//*
// Requests
type ExitReq struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" yaml:"-" xml:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" yaml:"-" xml:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" yaml:"-" xml:"-" bson:"-"`
}

func (m *ExitReq) Reset()         { *m = ExitReq{} }
func (m *ExitReq) String() string { return proto.CompactTextString(m) }
func (*ExitReq) ProtoMessage()    {}
func (*ExitReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{4}
}
func (m *ExitReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExitReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExitReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExitReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExitReq.Merge(m, src)
}
func (m *ExitReq) XXX_Size() int {
	return m.Size()
}
func (m *ExitReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ExitReq.DiscardUnknown(m)
}

var xxx_messageInfo_ExitReq proto.InternalMessageInfo

func (m *ExitReq) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (*ExitReq) XXX_MessageName() string {
	return "api.hellomicro.v1.ExitReq"
}

type LogReq struct {
	Count                int32    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" yaml:"-" xml:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" yaml:"-" xml:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" yaml:"-" xml:"-" bson:"-"`
}

func (m *LogReq) Reset()         { *m = LogReq{} }
func (m *LogReq) String() string { return proto.CompactTextString(m) }
func (*LogReq) ProtoMessage()    {}
func (*LogReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{5}
}
func (m *LogReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogReq.Merge(m, src)
}
func (m *LogReq) XXX_Size() int {
	return m.Size()
}
func (m *LogReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LogReq.DiscardUnknown(m)
}

var xxx_messageInfo_LogReq proto.InternalMessageInfo

func (m *LogReq) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (*LogReq) XXX_MessageName() string {
	return "api.hellomicro.v1.LogReq"
}

type LatencyReq struct {
	Duration             int32    `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" yaml:"-" xml:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" yaml:"-" xml:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" yaml:"-" xml:"-" bson:"-"`
}

func (m *LatencyReq) Reset()         { *m = LatencyReq{} }
func (m *LatencyReq) String() string { return proto.CompactTextString(m) }
func (*LatencyReq) ProtoMessage()    {}
func (*LatencyReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{6}
}
func (m *LatencyReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LatencyReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LatencyReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LatencyReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LatencyReq.Merge(m, src)
}
func (m *LatencyReq) XXX_Size() int {
	return m.Size()
}
func (m *LatencyReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LatencyReq.DiscardUnknown(m)
}

var xxx_messageInfo_LatencyReq proto.InternalMessageInfo

func (m *LatencyReq) GetDuration() int32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (*LatencyReq) XXX_MessageName() string {
	return "api.hellomicro.v1.LatencyReq"
}

type InfoRes struct {
	Os                   string          `protobuf:"bytes,1,opt,name=os,proto3" json:"os,omitempty"`
	Version              string          `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	NumCpu               int32           `protobuf:"varint,3,opt,name=num_cpu,json=numCpu,proto3" json:"num_cpu,omitempty"`
	NumGoRoutine         int32           `protobuf:"varint,4,opt,name=num_go_routine,json=numGoRoutine,proto3" json:"num_go_routine,omitempty"`
	NumCgoCall           int64           `protobuf:"varint,5,opt,name=num_cgo_call,json=numCgoCall,proto3" json:"num_cgo_call,omitempty"`
	Memory               *InfoRes_Memory `protobuf:"bytes,6,opt,name=memory,proto3" json:"memory,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-" yaml:"-" xml:"-" bson:"-"`
	XXX_unrecognized     []byte          `json:"-" yaml:"-" xml:"-" bson:"-"`
	XXX_sizecache        int32           `json:"-" yaml:"-" xml:"-" bson:"-"`
}

func (m *InfoRes) Reset()         { *m = InfoRes{} }
func (m *InfoRes) String() string { return proto.CompactTextString(m) }
func (*InfoRes) ProtoMessage()    {}
func (*InfoRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{7}
}
func (m *InfoRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InfoRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InfoRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InfoRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoRes.Merge(m, src)
}
func (m *InfoRes) XXX_Size() int {
	return m.Size()
}
func (m *InfoRes) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoRes.DiscardUnknown(m)
}

var xxx_messageInfo_InfoRes proto.InternalMessageInfo

func (m *InfoRes) GetOs() string {
	if m != nil {
		return m.Os
	}
	return ""
}

func (m *InfoRes) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *InfoRes) GetNumCpu() int32 {
	if m != nil {
		return m.NumCpu
	}
	return 0
}

func (m *InfoRes) GetNumGoRoutine() int32 {
	if m != nil {
		return m.NumGoRoutine
	}
	return 0
}

func (m *InfoRes) GetNumCgoCall() int64 {
	if m != nil {
		return m.NumCgoCall
	}
	return 0
}

func (m *InfoRes) GetMemory() *InfoRes_Memory {
	if m != nil {
		return m.Memory
	}
	return nil
}

func (*InfoRes) XXX_MessageName() string {
	return "api.hellomicro.v1.InfoRes"
}

type InfoRes_Memory struct {
	Alloc                uint64   `protobuf:"varint,1,opt,name=alloc,proto3" json:"alloc,omitempty"`
	TotalAlloc           uint64   `protobuf:"varint,2,opt,name=total_alloc,json=totalAlloc,proto3" json:"total_alloc,omitempty"`
	Sys                  uint64   `protobuf:"varint,3,opt,name=sys,proto3" json:"sys,omitempty"`
	NumGc                uint32   `protobuf:"varint,4,opt,name=num_gc,json=numGc,proto3" json:"num_gc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" yaml:"-" xml:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" yaml:"-" xml:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" yaml:"-" xml:"-" bson:"-"`
}

func (m *InfoRes_Memory) Reset()         { *m = InfoRes_Memory{} }
func (m *InfoRes_Memory) String() string { return proto.CompactTextString(m) }
func (*InfoRes_Memory) ProtoMessage()    {}
func (*InfoRes_Memory) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{7, 0}
}
func (m *InfoRes_Memory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InfoRes_Memory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InfoRes_Memory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InfoRes_Memory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoRes_Memory.Merge(m, src)
}
func (m *InfoRes_Memory) XXX_Size() int {
	return m.Size()
}
func (m *InfoRes_Memory) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoRes_Memory.DiscardUnknown(m)
}

var xxx_messageInfo_InfoRes_Memory proto.InternalMessageInfo

func (m *InfoRes_Memory) GetAlloc() uint64 {
	if m != nil {
		return m.Alloc
	}
	return 0
}

func (m *InfoRes_Memory) GetTotalAlloc() uint64 {
	if m != nil {
		return m.TotalAlloc
	}
	return 0
}

func (m *InfoRes_Memory) GetSys() uint64 {
	if m != nil {
		return m.Sys
	}
	return 0
}

func (m *InfoRes_Memory) GetNumGc() uint32 {
	if m != nil {
		return m.NumGc
	}
	return 0
}

func (*InfoRes_Memory) XXX_MessageName() string {
	return "api.hellomicro.v1.InfoRes.Memory"
}

type EnvironmentsRes struct {
	Environments         map[string]string `protobuf:"bytes,1,rep,name=environments,proto3" json:"environments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-" yaml:"-" xml:"-" bson:"-"`
	XXX_unrecognized     []byte            `json:"-" yaml:"-" xml:"-" bson:"-"`
	XXX_sizecache        int32             `json:"-" yaml:"-" xml:"-" bson:"-"`
}

func (m *EnvironmentsRes) Reset()         { *m = EnvironmentsRes{} }
func (m *EnvironmentsRes) String() string { return proto.CompactTextString(m) }
func (*EnvironmentsRes) ProtoMessage()    {}
func (*EnvironmentsRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{8}
}
func (m *EnvironmentsRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnvironmentsRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnvironmentsRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnvironmentsRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnvironmentsRes.Merge(m, src)
}
func (m *EnvironmentsRes) XXX_Size() int {
	return m.Size()
}
func (m *EnvironmentsRes) XXX_DiscardUnknown() {
	xxx_messageInfo_EnvironmentsRes.DiscardUnknown(m)
}

var xxx_messageInfo_EnvironmentsRes proto.InternalMessageInfo

func (m *EnvironmentsRes) GetEnvironments() map[string]string {
	if m != nil {
		return m.Environments
	}
	return nil
}

func (*EnvironmentsRes) XXX_MessageName() string {
	return "api.hellomicro.v1.EnvironmentsRes"
}

type EchoRes struct {
	Method               string                  `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	Proto                string                  `protobuf:"bytes,2,opt,name=proto,proto3" json:"proto,omitempty"`
	ContentLength        int64                   `protobuf:"varint,3,opt,name=content_length,json=contentLength,proto3" json:"content_length,omitempty"`
	RemoteAddr           string                  `protobuf:"bytes,4,opt,name=remote_addr,json=remoteAddr,proto3" json:"remote_addr,omitempty"`
	RequestUri           string                  `protobuf:"bytes,5,opt,name=request_uri,json=requestUri,proto3" json:"request_uri,omitempty"`
	Host                 string                  `protobuf:"bytes,6,opt,name=host,proto3" json:"host,omitempty"`
	UserAgent            string                  `protobuf:"bytes,7,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	Body                 string                  `protobuf:"bytes,8,opt,name=body,proto3" json:"body,omitempty"`
	Headers              map[string]*StringArray `protobuf:"bytes,9,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Params               map[string]*StringArray `protobuf:"bytes,10,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Url                  *URL                    `protobuf:"bytes,11,opt,name=url,proto3" json:"url,omitempty"`
	Cookies              []*Cookie               `protobuf:"bytes,12,rep,name=cookies,proto3" json:"cookies,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-" yaml:"-" xml:"-" bson:"-"`
	XXX_unrecognized     []byte                  `json:"-" yaml:"-" xml:"-" bson:"-"`
	XXX_sizecache        int32                   `json:"-" yaml:"-" xml:"-" bson:"-"`
}

func (m *EchoRes) Reset()         { *m = EchoRes{} }
func (m *EchoRes) String() string { return proto.CompactTextString(m) }
func (*EchoRes) ProtoMessage()    {}
func (*EchoRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{9}
}
func (m *EchoRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EchoRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EchoRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EchoRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoRes.Merge(m, src)
}
func (m *EchoRes) XXX_Size() int {
	return m.Size()
}
func (m *EchoRes) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoRes.DiscardUnknown(m)
}

var xxx_messageInfo_EchoRes proto.InternalMessageInfo

func (m *EchoRes) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *EchoRes) GetProto() string {
	if m != nil {
		return m.Proto
	}
	return ""
}

func (m *EchoRes) GetContentLength() int64 {
	if m != nil {
		return m.ContentLength
	}
	return 0
}

func (m *EchoRes) GetRemoteAddr() string {
	if m != nil {
		return m.RemoteAddr
	}
	return ""
}

func (m *EchoRes) GetRequestUri() string {
	if m != nil {
		return m.RequestUri
	}
	return ""
}

func (m *EchoRes) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *EchoRes) GetUserAgent() string {
	if m != nil {
		return m.UserAgent
	}
	return ""
}

func (m *EchoRes) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *EchoRes) GetHeaders() map[string]*StringArray {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *EchoRes) GetParams() map[string]*StringArray {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *EchoRes) GetUrl() *URL {
	if m != nil {
		return m.Url
	}
	return nil
}

func (m *EchoRes) GetCookies() []*Cookie {
	if m != nil {
		return m.Cookies
	}
	return nil
}

func (*EchoRes) XXX_MessageName() string {
	return "api.hellomicro.v1.EchoRes"
}

type RequestReq struct {
	Method               string   `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	Url                  string   `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Body                 string   `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" yaml:"-" xml:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" yaml:"-" xml:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" yaml:"-" xml:"-" bson:"-"`
}

func (m *RequestReq) Reset()         { *m = RequestReq{} }
func (m *RequestReq) String() string { return proto.CompactTextString(m) }
func (*RequestReq) ProtoMessage()    {}
func (*RequestReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{10}
}
func (m *RequestReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestReq.Merge(m, src)
}
func (m *RequestReq) XXX_Size() int {
	return m.Size()
}
func (m *RequestReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestReq.DiscardUnknown(m)
}

var xxx_messageInfo_RequestReq proto.InternalMessageInfo

func (m *RequestReq) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *RequestReq) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *RequestReq) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (*RequestReq) XXX_MessageName() string {
	return "api.hellomicro.v1.RequestReq"
}

type RequestRes struct {
	Body                 string                  `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	StatusCode           int32                   `protobuf:"varint,2,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Headers              map[string]*StringArray `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-" yaml:"-" xml:"-" bson:"-"`
	XXX_unrecognized     []byte                  `json:"-" yaml:"-" xml:"-" bson:"-"`
	XXX_sizecache        int32                   `json:"-" yaml:"-" xml:"-" bson:"-"`
}

func (m *RequestRes) Reset()         { *m = RequestRes{} }
func (m *RequestRes) String() string { return proto.CompactTextString(m) }
func (*RequestRes) ProtoMessage()    {}
func (*RequestRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{11}
}
func (m *RequestRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestRes.Merge(m, src)
}
func (m *RequestRes) XXX_Size() int {
	return m.Size()
}
func (m *RequestRes) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestRes.DiscardUnknown(m)
}

var xxx_messageInfo_RequestRes proto.InternalMessageInfo

func (m *RequestRes) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *RequestRes) GetStatusCode() int32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *RequestRes) GetHeaders() map[string]*StringArray {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (*RequestRes) XXX_MessageName() string {
	return "api.hellomicro.v1.RequestRes"
}

type ListFilesReq struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" yaml:"-" xml:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" yaml:"-" xml:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" yaml:"-" xml:"-" bson:"-"`
}

func (m *ListFilesReq) Reset()         { *m = ListFilesReq{} }
func (m *ListFilesReq) String() string { return proto.CompactTextString(m) }
func (*ListFilesReq) ProtoMessage()    {}
func (*ListFilesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{12}
}
func (m *ListFilesReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListFilesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListFilesReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListFilesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListFilesReq.Merge(m, src)
}
func (m *ListFilesReq) XXX_Size() int {
	return m.Size()
}
func (m *ListFilesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListFilesReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListFilesReq proto.InternalMessageInfo

func (m *ListFilesReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (*ListFilesReq) XXX_MessageName() string {
	return "api.hellomicro.v1.ListFilesReq"
}

type ListFilesRes struct {
	FileInfos            []*FileInfo `protobuf:"bytes,1,rep,name=file_infos,json=fileInfos,proto3" json:"file_infos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-" yaml:"-" xml:"-" bson:"-"`
	XXX_unrecognized     []byte      `json:"-" yaml:"-" xml:"-" bson:"-"`
	XXX_sizecache        int32       `json:"-" yaml:"-" xml:"-" bson:"-"`
}

func (m *ListFilesRes) Reset()         { *m = ListFilesRes{} }
func (m *ListFilesRes) String() string { return proto.CompactTextString(m) }
func (*ListFilesRes) ProtoMessage()    {}
func (*ListFilesRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{13}
}
func (m *ListFilesRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListFilesRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListFilesRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListFilesRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListFilesRes.Merge(m, src)
}
func (m *ListFilesRes) XXX_Size() int {
	return m.Size()
}
func (m *ListFilesRes) XXX_DiscardUnknown() {
	xxx_messageInfo_ListFilesRes.DiscardUnknown(m)
}

var xxx_messageInfo_ListFilesRes proto.InternalMessageInfo

func (m *ListFilesRes) GetFileInfos() []*FileInfo {
	if m != nil {
		return m.FileInfos
	}
	return nil
}

func (*ListFilesRes) XXX_MessageName() string {
	return "api.hellomicro.v1.ListFilesRes"
}

type ReadFileReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-" yaml:"-" xml:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" yaml:"-" xml:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" yaml:"-" xml:"-" bson:"-"`
}

func (m *ReadFileReq) Reset()         { *m = ReadFileReq{} }
func (m *ReadFileReq) String() string { return proto.CompactTextString(m) }
func (*ReadFileReq) ProtoMessage()    {}
func (*ReadFileReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{14}
}
func (m *ReadFileReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReadFileReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReadFileReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReadFileReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadFileReq.Merge(m, src)
}
func (m *ReadFileReq) XXX_Size() int {
	return m.Size()
}
func (m *ReadFileReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadFileReq.DiscardUnknown(m)
}

var xxx_messageInfo_ReadFileReq proto.InternalMessageInfo

func (*ReadFileReq) XXX_MessageName() string {
	return "api.hellomicro.v1.ReadFileReq"
}

type ReadFileRes struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-" yaml:"-" xml:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" yaml:"-" xml:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" yaml:"-" xml:"-" bson:"-"`
}

func (m *ReadFileRes) Reset()         { *m = ReadFileRes{} }
func (m *ReadFileRes) String() string { return proto.CompactTextString(m) }
func (*ReadFileRes) ProtoMessage()    {}
func (*ReadFileRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{15}
}
func (m *ReadFileRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReadFileRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReadFileRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReadFileRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadFileRes.Merge(m, src)
}
func (m *ReadFileRes) XXX_Size() int {
	return m.Size()
}
func (m *ReadFileRes) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadFileRes.DiscardUnknown(m)
}

var xxx_messageInfo_ReadFileRes proto.InternalMessageInfo

func (*ReadFileRes) XXX_MessageName() string {
	return "api.hellomicro.v1.ReadFileRes"
}

type WriteFileReq struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Content              []byte   `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Mode                 string   `protobuf:"bytes,3,opt,name=mode,proto3" json:"mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" yaml:"-" xml:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" yaml:"-" xml:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" yaml:"-" xml:"-" bson:"-"`
}

func (m *WriteFileReq) Reset()         { *m = WriteFileReq{} }
func (m *WriteFileReq) String() string { return proto.CompactTextString(m) }
func (*WriteFileReq) ProtoMessage()    {}
func (*WriteFileReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{16}
}
func (m *WriteFileReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WriteFileReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WriteFileReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WriteFileReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteFileReq.Merge(m, src)
}
func (m *WriteFileReq) XXX_Size() int {
	return m.Size()
}
func (m *WriteFileReq) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteFileReq.DiscardUnknown(m)
}

var xxx_messageInfo_WriteFileReq proto.InternalMessageInfo

func (m *WriteFileReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *WriteFileReq) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *WriteFileReq) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (*WriteFileReq) XXX_MessageName() string {
	return "api.hellomicro.v1.WriteFileReq"
}

type DeleteFileReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-" yaml:"-" xml:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" yaml:"-" xml:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" yaml:"-" xml:"-" bson:"-"`
}

func (m *DeleteFileReq) Reset()         { *m = DeleteFileReq{} }
func (m *DeleteFileReq) String() string { return proto.CompactTextString(m) }
func (*DeleteFileReq) ProtoMessage()    {}
func (*DeleteFileReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{17}
}
func (m *DeleteFileReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteFileReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteFileReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteFileReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteFileReq.Merge(m, src)
}
func (m *DeleteFileReq) XXX_Size() int {
	return m.Size()
}
func (m *DeleteFileReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteFileReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteFileReq proto.InternalMessageInfo

func (*DeleteFileReq) XXX_MessageName() string {
	return "api.hellomicro.v1.DeleteFileReq"
}

type DeleteFileRes struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-" yaml:"-" xml:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" yaml:"-" xml:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" yaml:"-" xml:"-" bson:"-"`
}

func (m *DeleteFileRes) Reset()         { *m = DeleteFileRes{} }
func (m *DeleteFileRes) String() string { return proto.CompactTextString(m) }
func (*DeleteFileRes) ProtoMessage()    {}
func (*DeleteFileRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{18}
}
func (m *DeleteFileRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteFileRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteFileRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteFileRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteFileRes.Merge(m, src)
}
func (m *DeleteFileRes) XXX_Size() int {
	return m.Size()
}
func (m *DeleteFileRes) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteFileRes.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteFileRes proto.InternalMessageInfo

func (*DeleteFileRes) XXX_MessageName() string {
	return "api.hellomicro.v1.DeleteFileRes"
}
func init() {
	proto.RegisterEnum("api.hellomicro.v1.Cookie_SameSite", Cookie_SameSite_name, Cookie_SameSite_value)
	golang_proto.RegisterEnum("api.hellomicro.v1.Cookie_SameSite", Cookie_SameSite_name, Cookie_SameSite_value)
	proto.RegisterType((*StringArray)(nil), "api.hellomicro.v1.StringArray")
	golang_proto.RegisterType((*StringArray)(nil), "api.hellomicro.v1.StringArray")
	proto.RegisterType((*URL)(nil), "api.hellomicro.v1.URL")
	golang_proto.RegisterType((*URL)(nil), "api.hellomicro.v1.URL")
	proto.RegisterType((*Cookie)(nil), "api.hellomicro.v1.Cookie")
	golang_proto.RegisterType((*Cookie)(nil), "api.hellomicro.v1.Cookie")
	proto.RegisterType((*FileInfo)(nil), "api.hellomicro.v1.FileInfo")
	golang_proto.RegisterType((*FileInfo)(nil), "api.hellomicro.v1.FileInfo")
	proto.RegisterType((*ExitReq)(nil), "api.hellomicro.v1.ExitReq")
	golang_proto.RegisterType((*ExitReq)(nil), "api.hellomicro.v1.ExitReq")
	proto.RegisterType((*LogReq)(nil), "api.hellomicro.v1.LogReq")
	golang_proto.RegisterType((*LogReq)(nil), "api.hellomicro.v1.LogReq")
	proto.RegisterType((*LatencyReq)(nil), "api.hellomicro.v1.LatencyReq")
	golang_proto.RegisterType((*LatencyReq)(nil), "api.hellomicro.v1.LatencyReq")
	proto.RegisterType((*InfoRes)(nil), "api.hellomicro.v1.InfoRes")
	golang_proto.RegisterType((*InfoRes)(nil), "api.hellomicro.v1.InfoRes")
	proto.RegisterType((*InfoRes_Memory)(nil), "api.hellomicro.v1.InfoRes.Memory")
	golang_proto.RegisterType((*InfoRes_Memory)(nil), "api.hellomicro.v1.InfoRes.Memory")
	proto.RegisterType((*EnvironmentsRes)(nil), "api.hellomicro.v1.EnvironmentsRes")
	golang_proto.RegisterType((*EnvironmentsRes)(nil), "api.hellomicro.v1.EnvironmentsRes")
	proto.RegisterMapType((map[string]string)(nil), "api.hellomicro.v1.EnvironmentsRes.EnvironmentsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "api.hellomicro.v1.EnvironmentsRes.EnvironmentsEntry")
	proto.RegisterType((*EchoRes)(nil), "api.hellomicro.v1.EchoRes")
	golang_proto.RegisterType((*EchoRes)(nil), "api.hellomicro.v1.EchoRes")
	proto.RegisterMapType((map[string]*StringArray)(nil), "api.hellomicro.v1.EchoRes.HeadersEntry")
	golang_proto.RegisterMapType((map[string]*StringArray)(nil), "api.hellomicro.v1.EchoRes.HeadersEntry")
	proto.RegisterMapType((map[string]*StringArray)(nil), "api.hellomicro.v1.EchoRes.ParamsEntry")
	golang_proto.RegisterMapType((map[string]*StringArray)(nil), "api.hellomicro.v1.EchoRes.ParamsEntry")
	proto.RegisterType((*RequestReq)(nil), "api.hellomicro.v1.RequestReq")
	golang_proto.RegisterType((*RequestReq)(nil), "api.hellomicro.v1.RequestReq")
	proto.RegisterType((*RequestRes)(nil), "api.hellomicro.v1.RequestRes")
	golang_proto.RegisterType((*RequestRes)(nil), "api.hellomicro.v1.RequestRes")
	proto.RegisterMapType((map[string]*StringArray)(nil), "api.hellomicro.v1.RequestRes.HeadersEntry")
	golang_proto.RegisterMapType((map[string]*StringArray)(nil), "api.hellomicro.v1.RequestRes.HeadersEntry")
	proto.RegisterType((*ListFilesReq)(nil), "api.hellomicro.v1.ListFilesReq")
	golang_proto.RegisterType((*ListFilesReq)(nil), "api.hellomicro.v1.ListFilesReq")
	proto.RegisterType((*ListFilesRes)(nil), "api.hellomicro.v1.ListFilesRes")
	golang_proto.RegisterType((*ListFilesRes)(nil), "api.hellomicro.v1.ListFilesRes")
	proto.RegisterType((*ReadFileReq)(nil), "api.hellomicro.v1.ReadFileReq")
	golang_proto.RegisterType((*ReadFileReq)(nil), "api.hellomicro.v1.ReadFileReq")
	proto.RegisterType((*ReadFileRes)(nil), "api.hellomicro.v1.ReadFileRes")
	golang_proto.RegisterType((*ReadFileRes)(nil), "api.hellomicro.v1.ReadFileRes")
	proto.RegisterType((*WriteFileReq)(nil), "api.hellomicro.v1.WriteFileReq")
	golang_proto.RegisterType((*WriteFileReq)(nil), "api.hellomicro.v1.WriteFileReq")
	proto.RegisterType((*DeleteFileReq)(nil), "api.hellomicro.v1.DeleteFileReq")
	golang_proto.RegisterType((*DeleteFileReq)(nil), "api.hellomicro.v1.DeleteFileReq")
	proto.RegisterType((*DeleteFileRes)(nil), "api.hellomicro.v1.DeleteFileRes")
	golang_proto.RegisterType((*DeleteFileRes)(nil), "api.hellomicro.v1.DeleteFileRes")
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }
func init() { golang_proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 1778 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0xdd, 0x6e, 0x1b, 0xc7,
	0x15, 0xee, 0xf2, 0x9f, 0x87, 0x94, 0x44, 0x4d, 0x1d, 0x85, 0x5e, 0xd7, 0xb2, 0xbc, 0x68, 0x5a,
	0x23, 0x40, 0x48, 0x9b, 0xf1, 0x85, 0xeb, 0x02, 0x49, 0x19, 0x89, 0xae, 0x65, 0x50, 0x36, 0xbb,
	0xb2, 0xda, 0x24, 0x68, 0xc1, 0x8e, 0x97, 0x23, 0x72, 0x93, 0xdd, 0x9d, 0xd5, 0xcc, 0xac, 0x64,
	0x16, 0xbd, 0x28, 0xfa, 0x02, 0x05, 0xda, 0xd7, 0xe8, 0x0b, 0xf4, 0xae, 0x97, 0xb9, 0x0c, 0xd0,
	0xf4, 0xbe, 0xb0, 0xfb, 0x20, 0xc5, 0x9c, 0xd9, 0xa5, 0x28, 0x69, 0x69, 0x37, 0x68, 0x73, 0xa5,
	0x39, 0x3f, 0xf3, 0xed, 0x9e, 0xef, 0x1c, 0x7e, 0x67, 0x21, 0x58, 0x93, 0x4c, 0x9c, 0xfa, 0x1e,
	0xeb, 0xc4, 0x82, 0x2b, 0x4e, 0x36, 0x69, 0xec, 0x77, 0x66, 0x2c, 0x08, 0x78, 0xe8, 0x7b, 0x82,
	0x77, 0x4e, 0xef, 0xd9, 0x37, 0xa6, 0x9c, 0x4f, 0x03, 0xd6, 0xc5, 0x84, 0x17, 0xc9, 0x71, 0x97,
	0x85, 0xb1, 0x9a, 0x9b, 0x7c, 0xfb, 0x07, 0x69, 0x90, 0xc6, 0x7e, 0x97, 0x46, 0x11, 0x57, 0x54,
	0xf9, 0x3c, 0x92, 0x69, 0xf4, 0xd6, 0xe5, 0xab, 0xca, 0x0f, 0x99, 0x54, 0x34, 0x8c, 0xd3, 0x04,
	0xf3, 0xc7, 0xfb, 0x60, 0xca, 0xa2, 0x0f, 0x78, 0xcc, 0x22, 0x1a, 0xfb, 0xa7, 0xbd, 0x2e, 0x8f,
	0x11, 0x24, 0x07, 0xf0, 0xda, 0x94, 0x4f, 0x39, 0x1e, 0xbb, 0xfa, 0x64, 0xbc, 0xce, 0x7b, 0xd0,
	0x38, 0x54, 0xc2, 0x8f, 0xa6, 0x7d, 0x21, 0xe8, 0x9c, 0x6c, 0x41, 0xe5, 0x94, 0x06, 0x09, 0x93,
	0x6d, 0x6b, 0xa7, 0x78, 0xa7, 0xee, 0xa6, 0x96, 0xf3, 0x75, 0x01, 0x8a, 0x47, 0xee, 0x50, 0xc7,
	0xa5, 0x37, 0x63, 0x21, 0x6b, 0x5b, 0x3b, 0x96, 0x8e, 0x1b, 0x4b, 0xfb, 0x79, 0x4c, 0x4f, 0x12,
	0xd6, 0x2e, 0x18, 0xbf, 0xb1, 0x88, 0x0d, 0xb5, 0x44, 0x32, 0x11, 0xd1, 0x90, 0xb5, 0x8b, 0x18,
	0x59, 0xd8, 0x3a, 0x16, 0x53, 0x29, 0xcf, 0xb8, 0x98, 0xb4, 0x4b, 0x26, 0x96, 0xd9, 0x84, 0x40,
	0x69, 0xc6, 0xa5, 0x6a, 0x97, 0xd1, 0x8f, 0x67, 0xed, 0x8b, 0xa9, 0x9a, 0xb5, 0x2b, 0xc6, 0xa7,
	0xcf, 0xe4, 0x3a, 0xd4, 0x04, 0x3d, 0x1b, 0xa3, 0xbf, 0x8a, 0xfe, 0xaa, 0xa0, 0x67, 0x23, 0x1d,
	0xba, 0x01, 0x75, 0x1d, 0x3a, 0x49, 0x98, 0x98, 0xb7, 0x6b, 0x06, 0x5f, 0xd0, 0xb3, 0x5f, 0x68,
	0x5b, 0x3f, 0xfb, 0x58, 0xd0, 0x69, 0xc8, 0x22, 0xd5, 0xae, 0x9b, 0x58, 0x66, 0x93, 0xdb, 0xd0,
	0xd4, 0x17, 0x17, 0x71, 0xc0, 0x78, 0x43, 0xd0, 0xb3, 0x47, 0x59, 0xca, 0x2d, 0x68, 0x1c, 0x73,
	0xe1, 0xb1, 0x14, 0xbd, 0xb1, 0x63, 0xdd, 0xa9, 0xb9, 0x80, 0x2e, 0x83, 0x7f, 0x1b, 0x9a, 0x59,
	0x2d, 0x63, 0xc9, 0x54, 0xbb, 0x89, 0x19, 0x8d, 0xcc, 0x77, 0xc8, 0x94, 0xf3, 0x4d, 0x11, 0x2a,
	0xbb, 0x9c, 0x7f, 0xe9, 0x33, 0x5d, 0x19, 0x32, 0x64, 0x38, 0xc5, 0x33, 0xb9, 0x06, 0x65, 0xe4,
	0x3e, 0x25, 0xd4, 0x18, 0x0b, 0x0e, 0x8a, 0x4b, 0x1c, 0x6c, 0x41, 0x65, 0xc2, 0x43, 0xea, 0x47,
	0x29, 0x8b, 0xa9, 0x45, 0xee, 0x43, 0x95, 0xbd, 0x8c, 0x7d, 0xc1, 0x24, 0xd2, 0xd8, 0xe8, 0xd9,
	0x1d, 0x33, 0x53, 0x9d, 0x6c, 0xa6, 0x3a, 0xcf, 0xb3, 0x99, 0x72, 0xb3, 0x54, 0x5d, 0x9a, 0xae,
	0x3e, 0xbb, 0x69, 0xc8, 0x06, 0x41, 0xcf, 0x06, 0x69, 0xc2, 0xbb, 0x50, 0x0d, 0xe9, 0xcb, 0x31,
	0x9d, 0x32, 0x64, 0xbc, 0xec, 0x56, 0x42, 0xfa, 0xb2, 0x3f, 0xc5, 0x19, 0x90, 0xcc, 0x4b, 0x04,
	0x43, 0xb6, 0x6b, 0x6e, 0x6a, 0xe9, 0x46, 0xcc, 0x94, 0x8a, 0xc7, 0x3c, 0x0a, 0xe6, 0x48, 0x76,
	0xcd, 0xad, 0x69, 0xc7, 0xb3, 0x28, 0x98, 0x93, 0x8f, 0xa1, 0x2e, 0x69, 0xc8, 0xc6, 0xd2, 0x57,
	0x0c, 0x99, 0x5e, 0xef, 0x39, 0x9d, 0x2b, 0x3f, 0xa4, 0x8e, 0x21, 0xaa, 0x73, 0x48, 0x43, 0x76,
	0xe8, 0x2b, 0xe6, 0xd6, 0x64, 0x7a, 0x22, 0x2d, 0x28, 0x0a, 0x7a, 0x86, 0x2d, 0xa8, 0xbb, 0xfa,
	0x88, 0x33, 0x17, 0xc5, 0x54, 0x48, 0x36, 0x69, 0x37, 0x71, 0x8a, 0x17, 0xb6, 0xf3, 0x5b, 0xa8,
	0x65, 0x18, 0xe4, 0x1a, 0xb4, 0x9e, 0x7f, 0x36, 0x1a, 0x8c, 0x8f, 0x9e, 0x1e, 0x8e, 0x06, 0xbb,
	0xfb, 0x8f, 0xf6, 0x07, 0x7b, 0xad, 0xef, 0x91, 0x16, 0x34, 0xf7, 0x06, 0x8f, 0xfa, 0x47, 0xc3,
	0xe7, 0xe3, 0x83, 0x67, 0x7b, 0x83, 0x96, 0x45, 0x9a, 0x50, 0x1b, 0xf6, 0x3f, 0x35, 0x56, 0x81,
	0x6c, 0x40, 0xe3, 0xf0, 0xb9, 0xbb, 0xbf, 0x9b, 0x86, 0x8b, 0x64, 0x0d, 0xea, 0x4f, 0x9f, 0x3d,
	0x1d, 0x18, 0xb3, 0xe4, 0xfc, 0x1e, 0x6a, 0x8f, 0xfc, 0x80, 0xed, 0x47, 0xc7, 0x7c, 0xd1, 0x2d,
	0x6b, 0xa9, 0x5b, 0x04, 0x4a, 0xd2, 0xff, 0x9d, 0x69, 0x6b, 0xd1, 0xc5, 0xb3, 0xf6, 0x85, 0x7c,
	0x92, 0xfd, 0x42, 0xf0, 0xac, 0xbb, 0x17, 0xf2, 0x89, 0x6e, 0x10, 0xb6, 0xf5, 0x2d, 0xdd, 0x4b,
	0x53, 0x9d, 0x9b, 0x50, 0x1d, 0xbc, 0xf4, 0x95, 0xcb, 0x4e, 0x34, 0xa8, 0xa7, 0x41, 0x2d, 0x6c,
	0x12, 0x9e, 0x9d, 0x6d, 0xa8, 0x0c, 0xf9, 0x54, 0x47, 0xaf, 0x41, 0xd9, 0xe3, 0x49, 0xa4, 0xd2,
	0xb0, 0x31, 0x9c, 0x3b, 0x00, 0x43, 0xaa, 0x58, 0xe4, 0xcd, 0x75, 0x8e, 0x0d, 0xb5, 0x49, 0x22,
	0x50, 0x44, 0xd2, 0xb4, 0x85, 0xed, 0xfc, 0xad, 0x00, 0x55, 0x5d, 0xa3, 0xcb, 0x24, 0x59, 0x87,
	0x02, 0x97, 0x69, 0x91, 0x05, 0x2e, 0x49, 0x1b, 0xaa, 0xa7, 0x4c, 0x48, 0x7d, 0xcd, 0x0c, 0x6f,
	0x66, 0xea, 0xd9, 0x89, 0x92, 0x70, 0xec, 0xc5, 0x09, 0xd6, 0x5a, 0x76, 0x2b, 0x51, 0x12, 0xee,
	0xc6, 0x09, 0xf9, 0x21, 0xac, 0xeb, 0xc0, 0x94, 0x8f, 0x05, 0x4f, 0x94, 0x1f, 0x99, 0xa2, 0xcb,
	0x6e, 0x33, 0x4a, 0xc2, 0x9f, 0x73, 0xd7, 0xf8, 0xc8, 0x0e, 0x34, 0xf1, 0xfa, 0x94, 0x8f, 0x3d,
	0x1a, 0x04, 0x38, 0xd6, 0x45, 0x17, 0x34, 0xc6, 0x94, 0xef, 0xd2, 0x20, 0x20, 0x3f, 0x81, 0x4a,
	0xc8, 0x42, 0x2e, 0xe6, 0x38, 0xb8, 0x8d, 0xde, 0xed, 0x9c, 0x59, 0x4a, 0x5f, 0xbb, 0x73, 0x80,
	0x89, 0x6e, 0x7a, 0xc1, 0x9e, 0x41, 0xc5, 0x78, 0x34, 0x37, 0x34, 0x08, 0xb8, 0x87, 0x25, 0x95,
	0x5c, 0x63, 0xe8, 0x1f, 0x86, 0xe2, 0x8a, 0x06, 0x63, 0x13, 0x2b, 0x60, 0x0c, 0xd0, 0xd5, 0xc7,
	0x84, 0x16, 0x14, 0xe5, 0x5c, 0x62, 0x61, 0x25, 0x57, 0x1f, 0xc9, 0x3b, 0x50, 0xc1, 0xaa, 0x3c,
	0xac, 0x66, 0xcd, 0x2d, 0xeb, 0x6a, 0x3c, 0xe7, 0xaf, 0x16, 0x6c, 0x0c, 0xa2, 0x53, 0x5f, 0xf0,
	0x48, 0xab, 0x89, 0xd4, 0x1c, 0x7e, 0x0a, 0x4d, 0xb6, 0xe4, 0x42, 0xf9, 0x6d, 0xf4, 0xee, 0xe7,
	0xbc, 0xfe, 0xa5, 0x9b, 0x17, 0xec, 0x41, 0xa4, 0xc4, 0xdc, 0xbd, 0x80, 0x64, 0x7f, 0x0c, 0x9b,
	0x57, 0x52, 0xf4, 0xbb, 0x7e, 0xc9, 0xe6, 0x69, 0xcf, 0xf4, 0x31, 0x5f, 0x6f, 0x1e, 0x16, 0x1e,
	0x58, 0xce, 0x1f, 0xca, 0x50, 0x1d, 0x78, 0x33, 0x6c, 0xf5, 0x96, 0xe6, 0x57, 0xcd, 0xf8, 0x24,
	0xd3, 0x7f, 0x63, 0xe9, 0xdb, 0x38, 0x96, 0xd9, 0x6d, 0xb3, 0x11, 0xdf, 0x83, 0x75, 0x8f, 0x47,
	0x8a, 0x45, 0x6a, 0x1c, 0xb0, 0x68, 0x9a, 0xea, 0x56, 0xd1, 0x5d, 0x4b, 0xbd, 0x43, 0x74, 0xa2,
	0xe4, 0xb0, 0x90, 0x2b, 0x36, 0xa6, 0x93, 0x89, 0x48, 0x55, 0x0c, 0x8c, 0xab, 0x3f, 0x99, 0x08,
	0x93, 0x70, 0x92, 0x30, 0xa9, 0xc6, 0x89, 0xf0, 0xd3, 0xa5, 0x00, 0xa9, 0xeb, 0x48, 0xf8, 0x8b,
	0x75, 0x51, 0x59, 0x5a, 0x17, 0x37, 0x01, 0xf4, 0xaa, 0xd1, 0x42, 0x15, 0xa9, 0x74, 0x39, 0xd4,
	0xb5, 0xa7, 0xaf, 0x1d, 0xfa, 0xca, 0x0b, 0x3e, 0xc9, 0x36, 0x03, 0x9e, 0x49, 0x1f, 0xaa, 0x33,
	0x46, 0x27, 0x4c, 0xc8, 0x76, 0x1d, 0xf9, 0xff, 0x71, 0x1e, 0xff, 0x86, 0x8a, 0xce, 0x63, 0x93,
	0x69, 0x28, 0xcf, 0xee, 0x91, 0x8f, 0xa0, 0x12, 0x53, 0x41, 0x43, 0xd9, 0x06, 0x44, 0xf8, 0xd1,
	0x1b, 0x10, 0x46, 0x98, 0x68, 0x00, 0xd2, 0x5b, 0xe4, 0x0e, 0x14, 0x13, 0x11, 0xa0, 0x9c, 0x35,
	0x7a, 0x5b, 0x39, 0x97, 0x8f, 0xdc, 0xa1, 0xab, 0x53, 0xc8, 0x87, 0x50, 0xf5, 0x50, 0x15, 0x25,
	0xaa, 0x5c, 0xa3, 0x77, 0x7d, 0xa5, 0x6e, 0xba, 0x59, 0xa6, 0xfd, 0x39, 0x34, 0x97, 0xdf, 0x3b,
	0x67, 0x0e, 0xee, 0x2f, 0xcf, 0x41, 0xa3, 0xb7, 0x9d, 0x03, 0xba, 0xf4, 0xc1, 0xb0, 0x34, 0x27,
	0xf6, 0x67, 0xd0, 0x58, 0xaa, 0xe8, 0xff, 0x09, 0xed, 0x3c, 0x01, 0x70, 0x4d, 0xb7, 0xb5, 0x2e,
	0xad, 0x1a, 0xc2, 0x96, 0xe1, 0xce, 0x8c, 0x20, 0x72, 0x94, 0x35, 0xb9, 0x78, 0xde, 0x64, 0xe7,
	0xb5, 0xb5, 0x04, 0x26, 0x17, 0x29, 0xd6, 0xd2, 0x1c, 0xdc, 0x82, 0x86, 0x54, 0x54, 0x25, 0x72,
	0x8c, 0x0a, 0x5a, 0x40, 0x29, 0x02, 0xe3, 0xda, 0xd5, 0xe2, 0xbc, 0x77, 0x3e, 0x28, 0x45, 0xe4,
	0xfe, 0xfd, 0x9c, 0x5a, 0xce, 0x1f, 0x92, 0x3f, 0x2b, 0xdf, 0x65, 0x33, 0x1c, 0x07, 0x9a, 0x43,
	0x5f, 0x2a, 0xbd, 0x8a, 0x64, 0xba, 0x0d, 0x2e, 0xaf, 0x22, 0xe7, 0xc9, 0x85, 0x1c, 0x49, 0x1e,
	0x02, 0x1c, 0xfb, 0x01, 0x1b, 0xfb, 0xd1, 0x31, 0xcf, 0x14, 0xe8, 0x46, 0xce, 0x23, 0xb3, 0xfd,
	0xe6, 0xd6, 0x8f, 0xd3, 0x93, 0x74, 0xd6, 0xa0, 0xe1, 0x32, 0x3a, 0xd1, 0x21, 0x97, 0x9d, 0x5c,
	0x34, 0xa5, 0x33, 0x82, 0xe6, 0xaf, 0x84, 0xaf, 0x58, 0x1a, 0xce, 0x5d, 0x8c, 0x6d, 0x3d, 0xcf,
	0x28, 0x0b, 0x58, 0x6d, 0xd3, 0xcd, 0xcc, 0xbc, 0xf5, 0xe8, 0x6c, 0xc0, 0xda, 0x1e, 0x0b, 0xd8,
	0x02, 0xf2, 0xb2, 0x43, 0xf6, 0xbe, 0xa9, 0x03, 0x3c, 0x5e, 0xbc, 0x37, 0x79, 0x0c, 0xa5, 0x91,
	0x1f, 0x4d, 0xc9, 0xd6, 0x95, 0x35, 0x3a, 0xd0, 0xdf, 0xe4, 0xf6, 0x0a, 0xbf, 0xd3, 0xfa, 0xe3,
	0x3f, 0xfe, 0xfd, 0x97, 0x02, 0x90, 0x5a, 0xf7, 0xf4, 0x5e, 0x37, 0xd6, 0x08, 0x4f, 0xa0, 0xbc,
	0x2b, 0xa8, 0x9c, 0x7d, 0x6b, 0xa8, 0x4d, 0x84, 0x6a, 0x90, 0xba, 0x86, 0xf2, 0x10, 0xe2, 0x09,
	0x94, 0x47, 0x34, 0xf2, 0xbd, 0xff, 0x0d, 0x2b, 0x46, 0x88, 0x21, 0x94, 0xf4, 0xee, 0x27, 0x76,
	0x9e, 0xe4, 0x98, 0x8f, 0x82, 0xff, 0xae, 0x4a, 0xa6, 0x51, 0xf6, 0xa1, 0x38, 0xe4, 0x53, 0x92,
	0x27, 0x2a, 0xe6, 0x13, 0x62, 0x25, 0xd6, 0x06, 0x62, 0xd5, 0x49, 0x55, 0x63, 0x05, 0x7c, 0x4a,
	0x8e, 0xa0, 0x9a, 0x7e, 0x55, 0x90, 0x9b, 0x79, 0x70, 0x8b, 0x2f, 0x8e, 0x95, 0x90, 0xdf, 0x47,
	0xc8, 0x35, 0xd2, 0x40, 0xc8, 0x14, 0x6b, 0x08, 0x25, 0xfc, 0xca, 0x5a, 0x45, 0x9d, 0xbd, 0x7a,
	0xf7, 0x5f, 0xac, 0x57, 0xcf, 0x3b, 0x99, 0x40, 0x73, 0x79, 0x4d, 0xae, 0x44, 0x75, 0xde, 0xbe,
	0x92, 0x9d, 0x36, 0xa2, 0x13, 0xd2, 0x42, 0x36, 0x97, 0x51, 0x75, 0x8f, 0xbc, 0xd9, 0xb7, 0x7b,
	0xe7, 0x74, 0x5d, 0x5c, 0xea, 0x91, 0x46, 0xf9, 0x35, 0x54, 0x53, 0x91, 0xc9, 0x25, 0xf6, 0x5c,
	0x32, 0xed, 0x37, 0x86, 0xe5, 0x45, 0x7e, 0xd3, 0xbd, 0x4a, 0x18, 0xd4, 0x17, 0xf2, 0x40, 0x6e,
	0xe5, 0x35, 0x6e, 0x49, 0x60, 0xec, 0xb7, 0x24, 0x48, 0x67, 0x0b, 0x9f, 0xd1, 0x22, 0xeb, 0xfa,
	0x19, 0x5a, 0x38, 0x64, 0x37, 0xf0, 0xa5, 0x22, 0x2f, 0xa0, 0x96, 0x49, 0x05, 0xd9, 0xce, 0x7d,
	0xcd, 0x85, 0xac, 0xd8, 0x6f, 0x8e, 0xe7, 0x3e, 0x43, 0x30, 0x3a, 0x21, 0xbf, 0x81, 0xfa, 0x42,
	0x7f, 0x72, 0x4b, 0x59, 0x56, 0xa7, 0x95, 0x53, 0xf8, 0x2e, 0xa2, 0x6f, 0x92, 0x8d, 0x73, 0xf4,
	0x33, 0x7d, 0x8f, 0x7c, 0x01, 0x70, 0xae, 0x3d, 0x64, 0x27, 0x07, 0xff, 0x82, 0x56, 0xd9, 0x6f,
	0xcb, 0xb8, 0x34, 0x41, 0xe6, 0x51, 0x13, 0x4c, 0xf8, 0xe4, 0x9f, 0xd6, 0x9f, 0xfb, 0x7f, 0xb2,
	0xc8, 0x2f, 0x61, 0x03, 0xc5, 0x6d, 0xe7, 0x40, 0x03, 0xec, 0xf4, 0x47, 0xfb, 0xce, 0x47, 0xb0,
	0x7e, 0xe0, 0x7b, 0x33, 0xca, 0x82, 0x9d, 0x03, 0x2a, 0x25, 0x8f, 0xc8, 0x66, 0x68, 0xec, 0x10,
	0xcd, 0x8e, 0xc7, 0x43, 0xfb, 0xba, 0x16, 0x55, 0xea, 0xa9, 0x9f, 0x5d, 0x09, 0xf5, 0x8a, 0x77,
	0x3b, 0xf7, 0xec, 0xf5, 0x80, 0x7b, 0x34, 0xd0, 0x1f, 0x50, 0x0f, 0x1f, 0xdc, 0x7d, 0x70, 0xf7,
	0x7d, 0xcb, 0xea, 0xb5, 0x68, 0x1c, 0x07, 0xbe, 0x87, 0xdf, 0xfd, 0xdd, 0x2f, 0x24, 0x8f, 0x1e,
	0x5e, 0xf1, 0x7c, 0xf5, 0x6a, 0xdb, 0xfa, 0xfa, 0xd5, 0xb6, 0xf5, 0xaf, 0x57, 0xdb, 0xd6, 0xdf,
	0x5f, 0x6f, 0x5b, 0x5f, 0xbd, 0xde, 0xb6, 0xe0, 0x1d, 0x8f, 0x87, 0x57, 0x0b, 0xfd, 0xa4, 0x79,
	0x68, 0xfe, 0x6b, 0x32, 0xd2, 0xe4, 0x8e, 0xac, 0xcf, 0xcb, 0x9d, 0x9f, 0xd2, 0xd8, 0x7f, 0x51,
	0x41, 0xb2, 0x3f, 0xfc, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4f, 0x80, 0x14, 0xd1, 0x55, 0x11,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HellomicroClient is the client API for Hellomicro service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HellomicroClient interface {
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	Crash(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	Panic(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	Exit(ctx context.Context, in *ExitReq, opts ...grpc.CallOption) (*empty.Empty, error)
	Log(ctx context.Context, in *LogReq, opts ...grpc.CallOption) (*empty.Empty, error)
	Latency(ctx context.Context, in *LatencyReq, opts ...grpc.CallOption) (*empty.Empty, error)
	Info(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*InfoRes, error)
	Environments(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*EnvironmentsRes, error)
	Echo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*EchoRes, error)
	Request(ctx context.Context, in *RequestReq, opts ...grpc.CallOption) (*RequestRes, error)
	ListFiles(ctx context.Context, in *ListFilesReq, opts ...grpc.CallOption) (*ListFilesRes, error)
	ReadFile(ctx context.Context, in *ReadFileReq, opts ...grpc.CallOption) (*ReadFileRes, error)
	WriteFile(ctx context.Context, in *WriteFileReq, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteFile(ctx context.Context, in *DeleteFileReq, opts ...grpc.CallOption) (*DeleteFileRes, error)
}

type hellomicroClient struct {
	cc *grpc.ClientConn
}

func NewHellomicroClient(cc *grpc.ClientConn) HellomicroClient {
	return &hellomicroClient{cc}
}

func (c *hellomicroClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.hellomicro.v1.Hellomicro/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hellomicroClient) Crash(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.hellomicro.v1.Hellomicro/Crash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hellomicroClient) Panic(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.hellomicro.v1.Hellomicro/Panic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hellomicroClient) Exit(ctx context.Context, in *ExitReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.hellomicro.v1.Hellomicro/Exit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hellomicroClient) Log(ctx context.Context, in *LogReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.hellomicro.v1.Hellomicro/Log", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hellomicroClient) Latency(ctx context.Context, in *LatencyReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.hellomicro.v1.Hellomicro/Latency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hellomicroClient) Info(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*InfoRes, error) {
	out := new(InfoRes)
	err := c.cc.Invoke(ctx, "/api.hellomicro.v1.Hellomicro/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hellomicroClient) Environments(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*EnvironmentsRes, error) {
	out := new(EnvironmentsRes)
	err := c.cc.Invoke(ctx, "/api.hellomicro.v1.Hellomicro/Environments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hellomicroClient) Echo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*EchoRes, error) {
	out := new(EchoRes)
	err := c.cc.Invoke(ctx, "/api.hellomicro.v1.Hellomicro/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hellomicroClient) Request(ctx context.Context, in *RequestReq, opts ...grpc.CallOption) (*RequestRes, error) {
	out := new(RequestRes)
	err := c.cc.Invoke(ctx, "/api.hellomicro.v1.Hellomicro/Request", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hellomicroClient) ListFiles(ctx context.Context, in *ListFilesReq, opts ...grpc.CallOption) (*ListFilesRes, error) {
	out := new(ListFilesRes)
	err := c.cc.Invoke(ctx, "/api.hellomicro.v1.Hellomicro/ListFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hellomicroClient) ReadFile(ctx context.Context, in *ReadFileReq, opts ...grpc.CallOption) (*ReadFileRes, error) {
	out := new(ReadFileRes)
	err := c.cc.Invoke(ctx, "/api.hellomicro.v1.Hellomicro/ReadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hellomicroClient) WriteFile(ctx context.Context, in *WriteFileReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.hellomicro.v1.Hellomicro/WriteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hellomicroClient) DeleteFile(ctx context.Context, in *DeleteFileReq, opts ...grpc.CallOption) (*DeleteFileRes, error) {
	out := new(DeleteFileRes)
	err := c.cc.Invoke(ctx, "/api.hellomicro.v1.Hellomicro/DeleteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HellomicroServer is the server API for Hellomicro service.
type HellomicroServer interface {
	Ping(context.Context, *empty.Empty) (*empty.Empty, error)
	Crash(context.Context, *empty.Empty) (*empty.Empty, error)
	Panic(context.Context, *empty.Empty) (*empty.Empty, error)
	Exit(context.Context, *ExitReq) (*empty.Empty, error)
	Log(context.Context, *LogReq) (*empty.Empty, error)
	Latency(context.Context, *LatencyReq) (*empty.Empty, error)
	Info(context.Context, *empty.Empty) (*InfoRes, error)
	Environments(context.Context, *empty.Empty) (*EnvironmentsRes, error)
	Echo(context.Context, *empty.Empty) (*EchoRes, error)
	Request(context.Context, *RequestReq) (*RequestRes, error)
	ListFiles(context.Context, *ListFilesReq) (*ListFilesRes, error)
	ReadFile(context.Context, *ReadFileReq) (*ReadFileRes, error)
	WriteFile(context.Context, *WriteFileReq) (*empty.Empty, error)
	DeleteFile(context.Context, *DeleteFileReq) (*DeleteFileRes, error)
}

func RegisterHellomicroServer(s *grpc.Server, srv HellomicroServer) {
	s.RegisterService(&_Hellomicro_serviceDesc, srv)
}

func _Hellomicro_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HellomicroServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hellomicro.v1.Hellomicro/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HellomicroServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hellomicro_Crash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HellomicroServer).Crash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hellomicro.v1.Hellomicro/Crash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HellomicroServer).Crash(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hellomicro_Panic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HellomicroServer).Panic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hellomicro.v1.Hellomicro/Panic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HellomicroServer).Panic(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hellomicro_Exit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HellomicroServer).Exit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hellomicro.v1.Hellomicro/Exit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HellomicroServer).Exit(ctx, req.(*ExitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hellomicro_Log_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HellomicroServer).Log(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hellomicro.v1.Hellomicro/Log",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HellomicroServer).Log(ctx, req.(*LogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hellomicro_Latency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LatencyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HellomicroServer).Latency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hellomicro.v1.Hellomicro/Latency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HellomicroServer).Latency(ctx, req.(*LatencyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hellomicro_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HellomicroServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hellomicro.v1.Hellomicro/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HellomicroServer).Info(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hellomicro_Environments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HellomicroServer).Environments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hellomicro.v1.Hellomicro/Environments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HellomicroServer).Environments(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hellomicro_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HellomicroServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hellomicro.v1.Hellomicro/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HellomicroServer).Echo(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hellomicro_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HellomicroServer).Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hellomicro.v1.Hellomicro/Request",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HellomicroServer).Request(ctx, req.(*RequestReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hellomicro_ListFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HellomicroServer).ListFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hellomicro.v1.Hellomicro/ListFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HellomicroServer).ListFiles(ctx, req.(*ListFilesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hellomicro_ReadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HellomicroServer).ReadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hellomicro.v1.Hellomicro/ReadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HellomicroServer).ReadFile(ctx, req.(*ReadFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hellomicro_WriteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HellomicroServer).WriteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hellomicro.v1.Hellomicro/WriteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HellomicroServer).WriteFile(ctx, req.(*WriteFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hellomicro_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HellomicroServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hellomicro.v1.Hellomicro/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HellomicroServer).DeleteFile(ctx, req.(*DeleteFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Hellomicro_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.hellomicro.v1.Hellomicro",
	HandlerType: (*HellomicroServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Hellomicro_Ping_Handler,
		},
		{
			MethodName: "Crash",
			Handler:    _Hellomicro_Crash_Handler,
		},
		{
			MethodName: "Panic",
			Handler:    _Hellomicro_Panic_Handler,
		},
		{
			MethodName: "Exit",
			Handler:    _Hellomicro_Exit_Handler,
		},
		{
			MethodName: "Log",
			Handler:    _Hellomicro_Log_Handler,
		},
		{
			MethodName: "Latency",
			Handler:    _Hellomicro_Latency_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _Hellomicro_Info_Handler,
		},
		{
			MethodName: "Environments",
			Handler:    _Hellomicro_Environments_Handler,
		},
		{
			MethodName: "Echo",
			Handler:    _Hellomicro_Echo_Handler,
		},
		{
			MethodName: "Request",
			Handler:    _Hellomicro_Request_Handler,
		},
		{
			MethodName: "ListFiles",
			Handler:    _Hellomicro_ListFiles_Handler,
		},
		{
			MethodName: "ReadFile",
			Handler:    _Hellomicro_ReadFile_Handler,
		},
		{
			MethodName: "WriteFile",
			Handler:    _Hellomicro_WriteFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _Hellomicro_DeleteFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func (m *StringArray) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StringArray) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, s := range m.Values {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *URL) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *URL) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Scheme) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Scheme)))
		i += copy(dAtA[i:], m.Scheme)
	}
	if len(m.Opaque) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Opaque)))
		i += copy(dAtA[i:], m.Opaque)
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	if len(m.Host) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Host)))
		i += copy(dAtA[i:], m.Host)
	}
	if len(m.Path) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if len(m.RawPath) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.RawPath)))
		i += copy(dAtA[i:], m.RawPath)
	}
	if len(m.RawQuery) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.RawQuery)))
		i += copy(dAtA[i:], m.RawQuery)
	}
	if len(m.Fragment) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Fragment)))
		i += copy(dAtA[i:], m.Fragment)
	}
	if len(m.RawFragment) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.RawFragment)))
		i += copy(dAtA[i:], m.RawFragment)
	}
	if m.ForceQuery {
		dAtA[i] = 0x58
		i++
		if m.ForceQuery {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PasswordSet {
		dAtA[i] = 0x60
		i++
		if m.PasswordSet {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Cookie) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cookie) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if len(m.Path) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if len(m.Domain) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Domain)))
		i += copy(dAtA[i:], m.Domain)
	}
	if m.Expires != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Expires.Size()))
		n1, err1 := m.Expires.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	if len(m.RawExpires) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.RawExpires)))
		i += copy(dAtA[i:], m.RawExpires)
	}
	if m.MaxAge != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintService(dAtA, i, uint64(m.MaxAge))
	}
	if m.Secure {
		dAtA[i] = 0x40
		i++
		if m.Secure {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HttpOnly {
		dAtA[i] = 0x48
		i++
		if m.HttpOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SameSite != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintService(dAtA, i, uint64(m.SameSite))
	}
	if len(m.Raw) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Raw)))
		i += copy(dAtA[i:], m.Raw)
	}
	if len(m.Unparsed) > 0 {
		for _, s := range m.Unparsed {
			dAtA[i] = 0x62
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FileInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if m.Size_ != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Size_))
	}
	if len(m.Mode) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Mode)))
		i += copy(dAtA[i:], m.Mode)
	}
	if m.ModTime != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintService(dAtA, i, uint64(m.ModTime.Size()))
		n2, err2 := m.ModTime.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ExitReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExitReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LogReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LatencyReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LatencyReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Duration != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Duration))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *InfoRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InfoRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Os) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Os)))
		i += copy(dAtA[i:], m.Os)
	}
	if len(m.Version) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if m.NumCpu != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintService(dAtA, i, uint64(m.NumCpu))
	}
	if m.NumGoRoutine != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintService(dAtA, i, uint64(m.NumGoRoutine))
	}
	if m.NumCgoCall != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintService(dAtA, i, uint64(m.NumCgoCall))
	}
	if m.Memory != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Memory.Size()))
		n3, err3 := m.Memory.MarshalTo(dAtA[i:])
		if err3 != nil {
			return 0, err3
		}
		i += n3
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *InfoRes_Memory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InfoRes_Memory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Alloc != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Alloc))
	}
	if m.TotalAlloc != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintService(dAtA, i, uint64(m.TotalAlloc))
	}
	if m.Sys != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Sys))
	}
	if m.NumGc != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintService(dAtA, i, uint64(m.NumGc))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *EnvironmentsRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnvironmentsRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Environments) > 0 {
		for k, _ := range m.Environments {
			dAtA[i] = 0xa
			i++
			v := m.Environments[k]
			mapSize := 1 + len(k) + sovService(uint64(len(k))) + 1 + len(v) + sovService(uint64(len(v)))
			i = encodeVarintService(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintService(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintService(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *EchoRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EchoRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Method) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Method)))
		i += copy(dAtA[i:], m.Method)
	}
	if len(m.Proto) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Proto)))
		i += copy(dAtA[i:], m.Proto)
	}
	if m.ContentLength != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintService(dAtA, i, uint64(m.ContentLength))
	}
	if len(m.RemoteAddr) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.RemoteAddr)))
		i += copy(dAtA[i:], m.RemoteAddr)
	}
	if len(m.RequestUri) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.RequestUri)))
		i += copy(dAtA[i:], m.RequestUri)
	}
	if len(m.Host) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Host)))
		i += copy(dAtA[i:], m.Host)
	}
	if len(m.UserAgent) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.UserAgent)))
		i += copy(dAtA[i:], m.UserAgent)
	}
	if len(m.Body) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Body)))
		i += copy(dAtA[i:], m.Body)
	}
	if len(m.Headers) > 0 {
		for k, _ := range m.Headers {
			dAtA[i] = 0x4a
			i++
			v := m.Headers[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovService(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovService(uint64(len(k))) + msgSize
			i = encodeVarintService(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintService(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintService(dAtA, i, uint64(v.Size()))
				n4, err4 := v.MarshalTo(dAtA[i:])
				if err4 != nil {
					return 0, err4
				}
				i += n4
			}
		}
	}
	if len(m.Params) > 0 {
		for k, _ := range m.Params {
			dAtA[i] = 0x52
			i++
			v := m.Params[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovService(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovService(uint64(len(k))) + msgSize
			i = encodeVarintService(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintService(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintService(dAtA, i, uint64(v.Size()))
				n5, err5 := v.MarshalTo(dAtA[i:])
				if err5 != nil {
					return 0, err5
				}
				i += n5
			}
		}
	}
	if m.Url != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Url.Size()))
		n6, err6 := m.Url.MarshalTo(dAtA[i:])
		if err6 != nil {
			return 0, err6
		}
		i += n6
	}
	if len(m.Cookies) > 0 {
		for _, msg := range m.Cookies {
			dAtA[i] = 0x62
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RequestReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Method) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Method)))
		i += copy(dAtA[i:], m.Method)
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if len(m.Body) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Body)))
		i += copy(dAtA[i:], m.Body)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RequestRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Body) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Body)))
		i += copy(dAtA[i:], m.Body)
	}
	if m.StatusCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintService(dAtA, i, uint64(m.StatusCode))
	}
	if len(m.Headers) > 0 {
		for k, _ := range m.Headers {
			dAtA[i] = 0x1a
			i++
			v := m.Headers[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovService(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovService(uint64(len(k))) + msgSize
			i = encodeVarintService(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintService(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintService(dAtA, i, uint64(v.Size()))
				n7, err7 := v.MarshalTo(dAtA[i:])
				if err7 != nil {
					return 0, err7
				}
				i += n7
			}
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListFilesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListFilesReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListFilesRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListFilesRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FileInfos) > 0 {
		for _, msg := range m.FileInfos {
			dAtA[i] = 0xa
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ReadFileReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadFileReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ReadFileRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadFileRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WriteFileReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WriteFileReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if len(m.Mode) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Mode)))
		i += copy(dAtA[i:], m.Mode)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeleteFileReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteFileReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeleteFileRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteFileRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *StringArray) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, s := range m.Values {
			l = len(s)
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *URL) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Scheme)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Opaque)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.RawPath)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.RawQuery)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Fragment)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.RawFragment)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.ForceQuery {
		n += 2
	}
	if m.PasswordSet {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Cookie) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.Expires != nil {
		l = m.Expires.Size()
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.RawExpires)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.MaxAge != 0 {
		n += 1 + sovService(uint64(m.MaxAge))
	}
	if m.Secure {
		n += 2
	}
	if m.HttpOnly {
		n += 2
	}
	if m.SameSite != 0 {
		n += 1 + sovService(uint64(m.SameSite))
	}
	l = len(m.Raw)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.Unparsed) > 0 {
		for _, s := range m.Unparsed {
			l = len(s)
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FileInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovService(uint64(m.Size_))
	}
	l = len(m.Mode)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.ModTime != nil {
		l = m.ModTime.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExitReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovService(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LogReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovService(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LatencyReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Duration != 0 {
		n += 1 + sovService(uint64(m.Duration))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InfoRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Os)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.NumCpu != 0 {
		n += 1 + sovService(uint64(m.NumCpu))
	}
	if m.NumGoRoutine != 0 {
		n += 1 + sovService(uint64(m.NumGoRoutine))
	}
	if m.NumCgoCall != 0 {
		n += 1 + sovService(uint64(m.NumCgoCall))
	}
	if m.Memory != nil {
		l = m.Memory.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InfoRes_Memory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Alloc != 0 {
		n += 1 + sovService(uint64(m.Alloc))
	}
	if m.TotalAlloc != 0 {
		n += 1 + sovService(uint64(m.TotalAlloc))
	}
	if m.Sys != 0 {
		n += 1 + sovService(uint64(m.Sys))
	}
	if m.NumGc != 0 {
		n += 1 + sovService(uint64(m.NumGc))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EnvironmentsRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Environments) > 0 {
		for k, v := range m.Environments {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovService(uint64(len(k))) + 1 + len(v) + sovService(uint64(len(v)))
			n += mapEntrySize + 1 + sovService(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EchoRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Proto)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.ContentLength != 0 {
		n += 1 + sovService(uint64(m.ContentLength))
	}
	l = len(m.RemoteAddr)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.RequestUri)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.UserAgent)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.Headers) > 0 {
		for k, v := range m.Headers {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovService(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovService(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovService(uint64(mapEntrySize))
		}
	}
	if len(m.Params) > 0 {
		for k, v := range m.Params {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovService(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovService(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovService(uint64(mapEntrySize))
		}
	}
	if m.Url != nil {
		l = m.Url.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.Cookies) > 0 {
		for _, e := range m.Cookies {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RequestReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RequestRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.StatusCode != 0 {
		n += 1 + sovService(uint64(m.StatusCode))
	}
	if len(m.Headers) > 0 {
		for k, v := range m.Headers {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovService(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovService(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovService(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListFilesReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListFilesRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FileInfos) > 0 {
		for _, e := range m.FileInfos {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReadFileReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReadFileRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WriteFileReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Mode)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteFileReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteFileRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StringArray) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StringArray: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StringArray: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *URL) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: URL: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: URL: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scheme", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scheme = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opaque", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Opaque = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawQuery", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawQuery = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fragment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fragment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawFragment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawFragment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceQuery", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForceQuery = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PasswordSet", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PasswordSet = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Cookie) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cookie: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cookie: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expires", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Expires == nil {
				m.Expires = &types.Timestamp{}
			}
			if err := m.Expires.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawExpires", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawExpires = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAge", wireType)
			}
			m.MaxAge = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxAge |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secure", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Secure = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HttpOnly = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SameSite", wireType)
			}
			m.SameSite = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SameSite |= Cookie_SameSite(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Raw", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Raw = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unparsed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unparsed = append(m.Unparsed, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ModTime == nil {
				m.ModTime = &types.Timestamp{}
			}
			if err := m.ModTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExitReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExitReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExitReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LatencyReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LatencyReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LatencyReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InfoRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InfoRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InfoRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Os", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Os = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumCpu", wireType)
			}
			m.NumCpu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumCpu |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumGoRoutine", wireType)
			}
			m.NumGoRoutine = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumGoRoutine |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumCgoCall", wireType)
			}
			m.NumCgoCall = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumCgoCall |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Memory == nil {
				m.Memory = &InfoRes_Memory{}
			}
			if err := m.Memory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InfoRes_Memory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Memory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Memory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alloc", wireType)
			}
			m.Alloc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Alloc |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAlloc", wireType)
			}
			m.TotalAlloc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalAlloc |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sys", wireType)
			}
			m.Sys = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sys |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumGc", wireType)
			}
			m.NumGc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumGc |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnvironmentsRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnvironmentsRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnvironmentsRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Environments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Environments == nil {
				m.Environments = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthService
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthService
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthService
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthService
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipService(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthService
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Environments[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EchoRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EchoRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EchoRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proto", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proto = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentLength", wireType)
			}
			m.ContentLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContentLength |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAgent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAgent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Headers == nil {
				m.Headers = make(map[string]*StringArray)
			}
			var mapkey string
			var mapvalue *StringArray
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthService
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthService
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthService
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthService
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &StringArray{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipService(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthService
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Headers[mapkey] = mapvalue
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = make(map[string]*StringArray)
			}
			var mapkey string
			var mapvalue *StringArray
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthService
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthService
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthService
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthService
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &StringArray{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipService(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthService
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Params[mapkey] = mapvalue
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Url == nil {
				m.Url = &URL{}
			}
			if err := m.Url.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cookies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cookies = append(m.Cookies, &Cookie{})
			if err := m.Cookies[len(m.Cookies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusCode", wireType)
			}
			m.StatusCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatusCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Headers == nil {
				m.Headers = make(map[string]*StringArray)
			}
			var mapkey string
			var mapvalue *StringArray
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthService
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthService
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthService
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthService
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &StringArray{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipService(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthService
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Headers[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListFilesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListFilesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListFilesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListFilesRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListFilesRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListFilesRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileInfos = append(m.FileInfos, &FileInfo{})
			if err := m.FileInfos[len(m.FileInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadFileReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadFileReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadFileReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadFileRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadFileRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadFileRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WriteFileReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WriteFileReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WriteFileReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteFileReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteFileReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteFileReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteFileRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteFileRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteFileRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthService
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService   = fmt.Errorf("proto: integer overflow")
)
